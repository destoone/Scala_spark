[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\destine\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\destine\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Oracle Corporation Java 1.8.0_212)
[debug]       Load.loadUnit: plugins took 1315.4571ms
[debug]       Load.loadUnit: defsScala took 1.6258ms
[debug] [Loading] Scanning directory C:\Users\destine\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\destine\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 120.9681 ms
[debug]           Load.resolveProject(global-plugins) took 239.6372ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\destine\.sbt\1.0\plugins, plugins: List(<none>))) took 508.0791ms
[debug] [Loading] Done in C:\Users\destine\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 630.5897ms
[debug]       Load.loadUnit: cleanEvalClasses took 1.4083ms
[debug]     Load.loadUnit(file:/C:/Users/destine/.sbt/1.0/plugins/, ...) took 2058.2344ms
[debug]   Load.apply: load took 3059.983ms
[debug]   Load.apply: resolveProjects took 32.3259ms
[debug]   Load.apply: finalTransforms took 368.6888ms
[debug]   Load.apply: config.delegates took 41.3138ms
[debug]   Load.apply: Def.make(settings)... took 7588.2726ms
[debug]   Load.apply: structureIndex took 653.3203ms
[debug]   Load.apply: mkStreams took 5.3351ms
[info] loading global plugins from C:\Users\destine\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 88466.4953ms
[debug]           Load.loadUnit: plugins took 245.3708ms
[debug]           Load.loadUnit: defsScala took 0.0147ms
[debug] [Loading] Scanning directory C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse\project
[debug]             Load.loadUnit: mkEval took 87.5537ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 58.9553 ms
[info] loading settings for project sparkscalacourse-build from idea.sbt ...
[debug]               Load.resolveProject(sparkscalacourse-build) took 248.1674ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparkscalacourse-build, base: C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse\project, plugins: List(<none>))) took 308.6829ms
[debug] [Loading] Done in C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse\project, returning: (sparkscalacourse-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 21871.4462ms
[debug]           Load.loadUnit: cleanEvalClasses took 103.0539ms
[debug]         Load.loadUnit(file:/C:/Users/destine/Desktop/Big-Data%20Environment/SparkScalaCourse/project/, ...) took 22225.9211ms
[debug]       Load.apply: load took 22238.1588ms
[debug]       Load.apply: resolveProjects took 0.4403ms
[debug]       Load.apply: finalTransforms took 104.3084ms
[debug]       Load.apply: config.delegates took 1.012ms
[debug]       Load.apply: Def.make(settings)... took 1682.6757ms
[debug]       Load.apply: structureIndex took 304.0491ms
[debug]       Load.apply: mkStreams took 0.0077ms
[info] loading project definition from C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 38228.1626ms
[debug]     Load.loadUnit: defsScala took 0.01ms
[debug] [Loading] Scanning directory C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse
[debug]       Load.loadUnit: mkEval took 0.7943ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 10.5788 ms
[info] loading settings for project sparkscalacourse from build.sbt ...
[debug]         Load.resolveProject(sparkscalacourse) took 265.9666ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparkscalacourse, base: C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse, plugins: List(<none>))) took 308.7815ms
[debug] [Loading] Done in C:\Users\destine\Desktop\Big-Data Environment\SparkScalaCourse, returning: (sparkscalacourse)
[debug]     Load.loadUnit: loadedProjectsRaw took 18773.6872ms
[debug]     Load.loadUnit: cleanEvalClasses took 131.2326ms
[debug]   Load.loadUnit(file:/C:/Users/destine/Desktop/Big-Data%20Environment/SparkScalaCourse/, ...) took 57136.0355ms
[debug] Load.apply: load took 57178.7544ms
[debug] Load.apply: resolveProjects took 0.3009ms
[debug] Load.apply: finalTransforms took 99.6987ms
[debug] Load.apply: config.delegates took 0.8475ms
[debug] Load.apply: Def.make(settings)... took 1455.0941ms
[debug] Load.apply: structureIndex took 146.807ms
[debug] Load.apply: mkStreams took 0.0069ms
[info] set current project to SparkScalaCourse (in build file:/C:/Users/destine/Desktop/Big-Data%20Environment/SparkScalaCourse/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58090 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58090, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkScalaCourse (in build file:/C:/Users/destine/Desktop/Big-Data%20Environment/SparkScalaCourse/)
[debug] > Exec(idea-shell, None, None)
